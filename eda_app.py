# -*- coding: utf-8 -*-
"""eda_app.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BObZMGZJdTe1J0RrBCiRH8BkWDs4LzjE
"""

import base64
import streamlit as st
import pandas as pd
import plotly.express as px
import pandas as pd
import numpy as np
import time as timer
import seaborn as sns
from sklearn.preprocessing import LabelEncoder,StandardScaler
from plotly.subplots import make_subplots
import plotly.graph_objects as go
import matplotlib.pyplot as plt
import plotly

import functions
def get_img_as_base64(file):
    with open(file, "rb") as f:
        data = f.read()
    return base64.b64encode(data).decode()

img = get_img_as_base64("stroke1.jpg")

def appeda():
  df= pd.read_csv('dataC.csv')
  page_bg_img = f"""
<style>
[data-testid="stSidebar"] > div:first-child {{
background-image: url("data:image/png;base64,{img}");
background-size: 100%;
background-position: top left; 
background-repeat: no-repeat;
background-attachment: fixed;
}}
[data-testid="stHeader"] {{
background: rgba(0,0,0,0);
}}
[data-testid="stToolbar"] {{
right: 2rem;
}}
</style>
"""
  df= pd.read_csv('dataC.csv')
  st.markdown(page_bg_img, unsafe_allow_html=True)
  st.header("ðŸŽ¨Exploratory Data Analysis  for Stroke in Bekaa Area")
  
  st.write('<p style="font-size:160%">You will be able toâœ…:</p>', unsafe_allow_html=True)
  
  with st.expander("What you will be able to do"):
    st.write('<p style="font-size:100%">&nbsp 1. See the whole dataset</p>', unsafe_allow_html=True)
    st.write('<p style="font-size:100%">&nbsp 2. Get column names, data types info</p>', unsafe_allow_html=True)
    st.write('<p style="font-size:100%">&nbsp 3. Get the count and percentage of NA values</p>', unsafe_allow_html=True)
    st.write('<p style="font-size:100%">&nbsp 4. Get descriptive analysis </p>', unsafe_allow_html=True)
    st.write('<p style="font-size:100%">&nbsp 5. Check inbalance or distribution of target variable:</p>', unsafe_allow_html=True)
    st.write('<p style="font-size:100%">&nbsp 6. See distribution of numerical columns</p>', unsafe_allow_html=True)
    st.write('<p style="font-size:100%">&nbsp 7. See count plot of categorical columns</p>', unsafe_allow_html=True)
    st.write('<p style="font-size:100%">&nbsp 8. Get outlier analysis with box plots</p>', unsafe_allow_html=True)
    st.write('<p style="font-size:100%">&nbsp 9. Obtain info of target value variance with categorical columns</p>', unsafe_allow_html=True)
#st.image('header2.png', use_column_width = True)

  corrtable = df.corr()
  highest_corr=corrtable[corrtable>=0.2]

  functions.space()
  st.write('<p style="font-size:130%">Import Dataset</p>', unsafe_allow_html=True)

  file_format = st.radio('Select file format:', ('csv', 'excel'), key='file_format')
  dataset = st.file_uploader(label = '')


  st.sidebar.header('Import Dataset to Use Available Features: ðŸ‘‰')

  if dataset:
       if file_format == 'csv':
        df = pd.read_csv(dataset)
       else:
        df = pd.read_excel(dataset)

  with st.expander("Data Frame"):
    n, m = df.shape
    st.write(f'<p style="font-size:130%">Dataset contains {n} rows and {m} columns.</p>', unsafe_allow_html=True)
    st.dataframe(df)

  #filter data for specific year
  colum1, colum2 = st.columns((1,1))
  with colum1:
    year_filter = st.selectbox("Select the year",  pd.unique(df["year"]))
    df = df[df["year"] == year_filter]

  with colum2:
    occupation_filter = st.selectbox('Select the Area', pd.unique(df["Residence type"]))
    df = df[df["Residence type"]== occupation_filter]

  all_vizuals = ['Info', 'NA Info', 'Descriptive Analysis', 'Target Analysis', 
                   'coorealation Matrix', 
                   'Box Plots', 'Outlier Analysis', 'Variance of Target with Categorical Columns']
  functions.sidebar_space(3)         
  
  sub_plots = ['StrokeVsAge', 'SmokingVsStorke', 'BMIvsStroke', 'stroke']
  
  insights=['Age_group', 'Disease_Insights', 'Occupation','DisabilityVsAreas']
  COL1, COL2, COL3 = st.columns((1,1,1))
  with COL1:
    vizuals = st.multiselect("Choose visualizations to see ðŸ‘‡", all_vizuals, key=str)
  with COL2:
      sub_plots_choice = st.multiselect('Choose plots: ðŸ‘‡', sub_plots, default= None,key='plots')
  with COL3:
    insights_choice= st.multiselect('Choose insights: ðŸ‘‡', insights, default= None,key='plts')


  # create four columns
  with open('style.css') as f:
      st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html=True)

  col1, col2,col3, col4 = st.columns((0.3,0.3,0.3,0.3))
  col1.metric("Stroke", value=(df['stroke'].value_counts()[1]),delta=None)
  col2.metric("No Stroke", value= (df['stroke'].value_counts()[0]),delta=None)
  col3.metric("Disability/death", value=(df['disability/death'].value_counts()[1]), delta= None)
  col4.metric(" No Disability/death", value=(df['disability/death'].value_counts()[0]), delta= None)

#with open('style.css') as f:
  #st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html=True)
  
  #col1, col2, col3,col4 = st.columns(4)
  # fill in those three columns with respective metrics or KPIs
  #col1.metric(label="stroke ",value=(df['stroke'].value_counts()[1]),delta=None)
  #col2.metric(label="no stroke",value= (df['stroke'].value_counts()[0]),delta=None)
  #col3.metric(label="Disability/death", value=(df['disability/death'].value_counts()[1]), delta= None )
  #col4.metric(label=" No Disabilit/death", value=(df['disability/death'].value_counts()[0]), delta= None )



  labels = 'Stroke', 'No Stroke'
  sizes = [80.7, 19.3]
  explode = (0, 0.1)
  work_type = ['Private', 'Self-employed', 'Govt_job', 'children', 'Never_worked']
  percent = [59.40, 20.97, 11.48, 7.99, 0.17]
  explode1= (0.1, 0, 0, 0, 0)
  labels1 = list(work_type)



  if 'Info' in vizuals:
        st.subheader('Info:')
        c1, c2, c3 = st.columns([1, 2, 1])
        c2.dataframe(functions.df_info(df))

  if 'NA Info' in vizuals:
        st.subheader('NA Value Information:')
        if df.isnull().sum().sum() == 0:
            st.write('There is not any NA value in your dataset.')
        else:
            c1, c2, c3 = st.columns([0.5, 2, 0.5])
            c2.dataframe(functions.df_isnull(df), width=1500)
            functions.space(2)
            

  if 'Descriptive Analysis' in vizuals:
        st.subheader('Descriptive Analysis:')
        st.dataframe(df.describe())
        
  if 'Target Analysis' in vizuals:
        st.subheader("Select target column:")    
        target_column = st.selectbox("", df.columns, index = len(df.columns) - 1)
    
        st.subheader("Histogram of target column")
        fig = px.histogram(df, x = target_column)
        c1, c2, c3 = st.columns([0.5, 2, 0.5])
        c2.plotly_chart(fig)


  num_columns = df.select_dtypes(exclude = 'object').columns
  cat_columns = df.select_dtypes(include = 'object').columns

    
  row2_1, row2_2 = st.columns((1,1))
  with row2_1:
      if 'StrokeVsAge' in sub_plots_choice:
            fig = px.histogram(df, x = df['age'], y = df['stroke'],labels={"age":"Age","sum of stroke":"number_of_strokes",}, title='Age Vs Stroke',width=400, height=500)
            st.write(fig, use_container_width = True)
  with row2_2:
      if 'SmokingVsStorke' in sub_plots_choice:
            fig1 = px.histogram(df, x = df['smoking'], y = df['stroke'],labels={"smoking":"Smoking_Status",}, title='Smoking Status Vs Stroke',width=400, height=500)
            st.write(fig1, use_container_width = True)

  row2_3, row2_4 = st.columns((1,1))
  with row2_3:
       if 'BMIvsStroke' in sub_plots_choice:
           fig2 = px.histogram(df, x = df['BMI'], y = df['stroke'],labels={"bmi":"BMI","sum of stroke":"number_of_strokes",}, title='BMI Vs Stroke',width=400, height=500)
           st.write(fig2, use_container_width = True)
  with row2_4:
       if 'stroke' in sub_plots_choice:
         fig3 , ax1 = plt.subplots()
         ax1.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',shadow=True, startangle=90)
         ax1.axis('equal')
         st.pyplot(fig3,use_container_width = True)

  row3_1, row3_2 = st.columns((2,1))
  with row3_1:
     if 'Age_group' in insights_choice:
       fig3=  px.histogram(df, x="Age_group", color="stroke", pattern_shape = "smoking",barmode='group', width=900, height=500)
       st.write(fig3,use_container_width = True)
  with row3_2:
    if 'Age_group' in insights_choice:
      fig4= px.histogram(df, x="Age_group", color="disability/death",barmode='group', width=600, height=500)
      st.write(fig4,use_container_width = True)
  row4_1,row4_2 = st.columns((2,1))
  with row4_1:
    if 'Age_group' in insights_choice:
      fig5 = px.histogram(df, x="gender", color='stroke',barmode='group', width=500, height=500)
      st.write(fig5,use_container_width = True)
  with row4_2:
    if 'Age_group' in insights_choice:
      st.write("""
			The percentage of women and men who had a stroke is **approximately 23% and 26%**, respectively. That
shows that **men are by 3% more prone to stroke disease**, which, however, still targets men
and women. 
        
			""")
    
  row5_1, row5_2= st.columns((2,1))
  with row5_1:
    if 'Disease_Insights' in insights_choice:
      fig6 = px.histogram(df, x="hypertension", color="stroke",barmode='group', width=500, height=400)
      st.write(fig6,use_container_width = True)
  with row5_2:
    if 'Disease_Insights' in insights_choice:
      fig7 = px.histogram(df, x="heart disease", color="stroke",barmode='group', width=500, height=400)
      st.write(fig7,use_container_width = True)
  row5_3, row5_4= st.columns((2,1))
  with row5_3:
    if 'Disease_Insights' in insights_choice:
      fig8 = px.histogram(df, x="diabetes", color='stroke',barmode='group', width=500, height=500)
      st.write(fig8,use_container_width = True)
  with row5_4:
    if 'Disease_Insights' in insights_choice:
      st.write("""
			 The following Figures presents the prevalence of hypertension and heart disease
among the participants who had a stroke. In the 1st figure, we observe that an essential ratio
of participants who had a **stroke has been diagnosed with hypertension** and the same applies for **Diabetic Patients** however thats not the case for heart disease 
        
			""")
    
  row6_1, row6_2= st.columns((2,1))
  with row6_1:
    if 'Occupation' in insights_choice:
      fig9 = px.histogram(df, x="marital_status", color='stroke',barmode='group', width=500, height=400)
      st.write(fig9,use_container_width = True)
  with row6_2:
    if 'Occupation' in insights_choice:
      fig10 = px.histogram(df, x="Age_group", color='marital_status',barmode='group', width=500, height=500)
      st.write(fig10,use_container_width = True)


  row7_1,row7_2= st.columns((2,3))
  with row7_1:
    if 'Occupation' in insights_choice:
      fig11 , ax2 = plt.subplots(figsize=(20, 20))
      ax2.pie(percent, explode=explode1, labels=labels1, autopct='%1.1f%%', shadow=True, startangle=90, textprops={'fontsize': 48})
      ax2.axis('equal')
      st.pyplot(fig11,use_container_width = True)
  with row7_2:
    if 'Occupation' in insights_choice:
      fig0, ax0 = plt.subplots(figsize=(200, 200))
      fig0 = sns.FacetGrid(df, hue="stroke",aspect=4)
      fig0.map(sns.kdeplot,'age',shade= True, ax=ax0)
      oldest = df['age'].max()
      fig0.set(xlim=(0,oldest))
      fig0.add_legend()
      st.pyplot(plt.gcf())
      st.write(""" The rate of marriage of men and women increases significantly from the year 35 and continues to rise until it reaches its maximum value in 55 years and then begins to decline slightly.Relying on the previous graphs, and since women are more numerous, the marriage rate of women is higher than men, and the rate of high blood pressure in women is higher than men, and based on the values of previous ages, we conclude that the incidence of stroke diseases among married people is higher. """)
   
  row8_1,row8_2= st.columns((1,1))
  with row8_1:
    if 'DisabilityVsAreas' in insights_choice:
      fig12 = px.histogram(df, x = df['disability/death'], y = df['Residence type'],labels={"disability/death":"disability/death","Residence type":"Residence type",}, title=('Residence type Vs StrokeOutCome'), width=600,height=300)
      st.write(fig12)
  with row8_2:
    if 'DisabilityVsAreas' in insights_choice:
      fig13 = px.histogram(df, x = df['stroke'], y = df['Residence type'],labels={"stroke":"stroke","Residence type":"Residence type",}, title=('Residence type Vs Stroke'), width=600,height=300)
      st.write(fig13)

  row9_1, row9_2 = st.columns((1,1)) 
  with row9_1:
    if 'DisabilityVsAreas' in insights_choice:
      fig14 = px.histogram(df, x = df['work_type'], y = df['stroke'],labels={"work_type":"work_type","stroke":"stroke",}, title=('work type Vs Stroke'), width=600,height=300)
      st.write(fig14)
  with row9_2:
    if 'DisabilityVsAreas' in insights_choice:
      fig15 = px.histogram(df, x = df['stroke'], y = df['marital_status'],labels={"stroke":"stroke","marital_status":"marital_status",}, title=('marital status Vs Stroke'), width=600,height=300)
      st.write(fig15)
      








       
  if 'coorealation Matrix' in vizuals:
      highest_corr=corrtable[corrtable>=0.2]
      figu=plt.figure(figsize=(15,10))
      sns.heatmap(highest_corr,cmap="Greens")
      st.write(figu)

  if 'Count Plots of Categorical Columns' in vizuals:

        if len(cat_columns) == 0:
            st.write('There is no categorical columns in the data.')
        else:
            selected_cat_cols = functions.sidebar_multiselect_container('Choose columns for Count plots:', cat_columns, 'Count')
            st.subheader('Count plots of categorical columns')
            i = 0
            while (i < len(selected_cat_cols)):
                c1, c2 = st.columns(2)
                for j in [c1, c2]:

                    if (i >= len(selected_cat_cols)):
                        break

                    fig = px.histogram(df, x = selected_cat_cols[i], color_discrete_sequence=['indianred'])
                    j.plotly_chart(fig)
                    i += 1

  if 'Box Plots' in vizuals:
        if len(num_columns) == 0:
            st.write('There is no numerical columns in the data.')
        else:
            selected_num_cols = functions.sidebar_multiselect_container('Choose columns for Box plots:', num_columns, 'Box')
            st.subheader('Box plots')
            i = 0
            while (i < len(selected_num_cols)):
                c1, c2 = st.columns(2)
                for j in [c1, c2]:
                    
                    if (i >= len(selected_num_cols)):
                        break
                    
                    fig = px.box(df, y = selected_num_cols[i])
                    j.plotly_chart(fig, use_container_width = True)
                    i += 1

  if 'Outlier Analysis' in vizuals:
        st.subheader('Outlier Analysis')
        c1, c2, c3 = st.columns([1, 2, 1])
        c2.dataframe(functions.number_of_outliers(df))

  if 'Variance of Target with Categorical Columns' in vizuals:
        
        
        df_1 = df.dropna()
        
        high_cardi_columns = []
        normal_cardi_columns = []

        for i in cat_columns:
            if (df[i].nunique() > df.shape[0] / 10):
                high_cardi_columns.append(i)
            else:
                normal_cardi_columns.append(i)


        if len(normal_cardi_columns) == 0:
            st.write('There is no categorical columns with normal cardinality in the data.')
        else:
        
            st.subheader('Variance of target variable with categorical columns')
            model_type = st.radio('Select Problem Type:', ('Regression', 'Classification'), key = 'model_type')
            selected_cat_cols = functions.sidebar_multiselect_container('Choose columns for Category Colored plots:', normal_cardi_columns, 'Category')
            
            if 'Target Analysis' not in vizuals:   
                target_column = st.selectbox("Select target column:", df.columns, index = len(df.columns) - 1)
            
            i = 0
            while (i < len(selected_cat_cols)):
                
                
            
                if model_type == 'Regression':
                    fig = px.box(df_1, y = target_column, color = selected_cat_cols[i])
                else:
                    fig = px.histogram(df_1, color = selected_cat_cols[i], x = target_column)

                st.plotly_chart(fig, use_container_width = True)
                i += 1

            if high_cardi_columns:
                if len(high_cardi_columns) == 1:
                    st.subheader('The following column has high cardinality, that is why its boxplot was not plotted:')
                else:
                    st.subheader('The following columns have high cardinality, that is why its boxplot was not plotted:')
                for i in high_cardi_columns:
                    st.write(i)
                
                st.write('<p style="font-size:140%">Do you want to plot anyway?</p>', unsafe_allow_html=True)    
                answer = st.selectbox("", ('No', 'Yes'))

                if answer == 'Yes':
                    for i in high_cardi_columns:
                        fig = px.box(df_1, y = target_column, color = i)
                        st.plotly_chart(fig, use_container_width = True)